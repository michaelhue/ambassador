<?php
/**
 * Ambassador: fetching data the easy way
 *
 * @license   MIT License
 * @author    Michael HÃ¼neburg
 * @copyright Copyright 2011, Think + Craft (http://thinkandcraft.com)
 */

namespace ambassador\core;

use \Exception;

/**
 * `Ambassador` is a static class and the heart of the application. You only need to interact
 * with this class.
 */
class Ambassador {

	/**
	 * Holds the `Cache` instance used by this class.
	 *
	 * @var object 
	 */
	protected static $_cache = null;

	/**
	 * Holds the configuration.
	 *
	 * @var array
	 */
	protected static $_config = array(
		'classes' => array(
			'cache' => 'ambassador\core\Cache'
		),
		'cache_dir' => null,
		'max_requests' => 3
	);

	/**
	 * Holds the configured adapter instances.
	 *
	 * @var array
	 */
	protected static $_adapters = array();

	/**
	 * Counts the number of requests. Used to limit requests in conjunction with 
	 * `Ambassador::$_config['max_requests']`.
	 *
	 * @var integer
	 */
	protected static $_requestsCount = 0;

	/**
	 * Sets configuration variables and instantiates required classes.
	 *
	 * @param array [$config]
	 * @return void	 
	 */
	public static function config(array $config = array()) {
		static::$_config = $config + static::$_config;
		static::$_cache = new static::$_config['classes']['cache'](static::$_config['cache_dir']);
	}

	/**
	 * Autoloader for Ambassador classes.
	 *
	 * @param string $name
	 * @return boolean
	 */
	public static function autoload($name) {
		$path = explode('\\', $name);
		if ($path[0] != 'ambassador') {
			return false;
		}
		
		$file = AMBASSADOR_DIR . '/' . join('/', array_slice($path, 1)) . '.php';
		if (file_exists($file)) {
			return require_once($file);
		}
		return false;
	}

	/**
	 * Creates a new `$adapter` instance with the given `$config` and stores it under `$key`.
	 *
	 * @param string $key
	 * @param string $adapter
	 * @param array [$config]
	 * @return boolean
	 */
	public static function add($key, $adapter, array $config = array()) {
		$class = 'ambassador\adapter\\' . $adapter;
		static::$_adapters[$key] = new $class($config);
		return true;
	}

	/**
	 * Fetches data for one or more adapters.
	 *
	 * @param array|string $keys A string of one or an array of several adapter key names added via 
	 *     `Ambassador::add()`. If given an array with two or more keys, the output of the adapters
	 *     will be combined (great for creating activity streams).
	 * @param array [$options] Optional options for the fetch operation. See `Ambassador::fetch()`.
	 * @return array|boolean Returns an array with the combined output or `false`.
	 */
	public static function fetch($keys, array $options = array()) {
		$defaults = array(
			'sort' => 'date',
			'direction' => 'desc',
			'cached' => false
		);
		$options += $defaults;
		$data = array();

		if (!is_array($keys)) {
			$keys = array($keys);
		}
		foreach ($keys as $key) {
			if ($adapter = static::_fetch($key, $options)) {
				$data = array_merge($data, $adapter);
			}
		}
		if (!empty($data)) {
			return static::sort($data, $options['sort'], $options['direction']);
		}
		return false;
	}

	/**
	 * Helper method for `Ambassador::fetch()`. Fetches data of a single adapter.
	 *
	 * @param string $key
	 * @param array $options
	 * @return array|boolean
	 * @see Ambassador::fetch()
	 */
	protected static function _fetch($key, array $options) {
		$config  = static::$_config;
		$adapter = static::$_adapters[$key];
		$cache   = static::$_cache;
		$cached  = $cache->read($key);
		$expires = 0;
		$data    = array();

		if (!empty($cached) && !empty($adapter->config['cache'])) {
			$expires = strtotime($adapter->config['cache'], $cached['time']);
			$data = $cached['data'];
		}
		if ($expires < time() && !$options['cached'] && ($config['max_requests'] == 0 || static::$_requestsCount <= $config['max_requests'])) {
			$response = $adapter->request();
			if (!empty($response)) {
				$data = $adapter->normalize($response);
				$cache->write($key, $data);
				static::$_requestsCount++;
			}
		}
		if (!empty($data)) {
			return $data;
		}
		return false;
	}

	/**
	 * Takes `$data` generated by `Ambassador::fetch()` and sorts it using `$key` and `$direction`.
	 *
	 * @param array $data An associative array with data to be sorted.
	 * @param string $key Key which will be used to sort. (Defaults to `date`.)
	 * @param string $direction Sort direction, `asc` or `desc`. (Defaults to `desc`.)
	 * @return array Returns the sorted data.
	 */
	public static function sort($data, $key = 'date', $direction = 'desc') {
		$sorted = array();
		foreach ($data as $i => $item) {
			if (isset($item[$key])) {
				$sorted["{$item[$key]}_{$i}"] = $item;
			} else {
				$sorted[$i] = $item;
			}
		}
		if ($direction == 'asc') {
			ksort($sorted);
		} else {
			krsort($sorted);
		}
		
		$data = array();
		foreach ($sorted as $item) {
			$data[] = $item;
		}
		return $data;
	}

}

?>